[gd_scene load_steps=12 format=3 uid="uid://cpcsfnspmoaiv"]

[ext_resource type="PackedScene" uid="uid://c1pbth37pynba" path="res://AdminStuff/camera_controller.tscn" id="1_ta1ms"]
[ext_resource type="ArrayMesh" uid="uid://c7hmy0urr02x0" path="res://Resources/Assets3D/BasketBall_Vadim Manoli/Basketball_ball.obj" id="2_anogb"]
[ext_resource type="Material" uid="uid://dcfd0bpr54mo7" path="res://StyleScenes/ToonShader1/ball_shader.tres" id="3_8em8c"]
[ext_resource type="PackedScene" uid="uid://c3hveklumpwgo" path="res://Resources/Assets3D/three_quarter_room.tscn" id="3_idi6a"]
[ext_resource type="Material" uid="uid://bd57nx3qmgj7g" path="res://StyleScenes/ToonShader1/wall_shader.tres" id="5_p4wtg"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_7hum5"]
albedo_color = Color(0, 0, 0, 1)
metallic = 1.0

[sub_resource type="Animation" id="Animation_yacch"]
resource_name = "new_animation"
length = 3.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -6.28319, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 1.8, 3),
"transitions": PackedFloat32Array(1, 0.353553, 1),
"update": 0,
"values": [Vector3(0, 0.432581, 0), Vector3(0, 1.708, 0), Vector3(0, 0.432581, 0)]
}

[sub_resource type="Animation" id="Animation_bjb7n"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(0, 0.432581, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_htifs"]
_data = {
"RESET": SubResource("Animation_bjb7n"),
"new_animation": SubResource("Animation_yacch")
}

[sub_resource type="Shader" id="Shader_nhxr7"]
code = "shader_type spatial;

//render_mode ambient_light_disabled;


uniform vec4 albedo : source_color = vec4(1.0f);
uniform sampler2D albedo_texture : source_color;
uniform bool clamp_diffuse_to_max = false;

uniform int cuts : hint_range(1, 8) = 3;
uniform float wrap : hint_range(-2.0f, 2.0f) = 0.0f;
uniform float steepness : hint_range(1.0f, 8.0f) = 1.0f;

uniform bool use_attenuation = true;

uniform bool use_specular = true;
uniform float specular_strength : hint_range(0.0f, 1.0f) = 1.0f;
uniform float specular_shininess : hint_range(0.0f, 32.0f) = 16.0f;
uniform sampler2D specular_map : source_color;

uniform bool use_rim = true;
uniform float rim_width : hint_range(0.0f, 16.0f) = 8.0f;
uniform vec4 rim_color : source_color = vec4(1.0f);

uniform bool use_ramp = false;
uniform sampler2D ramp : source_color;

uniform bool use_borders = false;
uniform float border_width = 0.01f;

varying vec3 vertex_pos;
varying vec3 normal;

float split_specular(float specular) {
	return step(0.5f, specular);
}

void vertex() {
	vertex_pos = VERTEX;
	normal = NORMAL;
}

void fragment() {
	ALBEDO = albedo.rgb * texture(albedo_texture, UV).rgb;
}

void light() {
	// Attenuation.
	float attenuation = 1.0f;
	if (use_attenuation) {
		attenuation = ATTENUATION;
	}
	
	// Diffuse lighting.
	float NdotL = dot(NORMAL, LIGHT);
	float diffuse_amount = NdotL + (attenuation - 1.0) + wrap;
	//float diffuse_amount = NdotL * attenuation + wrap;
	diffuse_amount *= steepness;
	float cuts_inv = 1.0f / float(cuts);
	float diffuse_stepped = clamp(diffuse_amount + mod(1.0f - diffuse_amount, cuts_inv), 0.0f, 1.0f);

	// Calculate borders.
	float border = 0.0f;
	if (use_borders) {
		float corr_border_width = length(cross(NORMAL, LIGHT)) * border_width * steepness;
		border = step(diffuse_stepped - corr_border_width, diffuse_amount)
				 - step(1.0 - corr_border_width, diffuse_amount);
	}
	
	// Apply diffuse result to different styles.
	vec3 diffuse = ALBEDO.rgb * LIGHT_COLOR / PI;
	if (use_ramp) {
		diffuse *= texture(ramp, vec2(diffuse_stepped * (1.0f - border), 0.0f)).rgb;
	} else {
		diffuse *= diffuse_stepped * (1.0f - border);
	}
	
	if (clamp_diffuse_to_max) {
		// Clamp diffuse to max for multiple light sources.
		DIFFUSE_LIGHT = max(DIFFUSE_LIGHT, diffuse);
	} else {
		DIFFUSE_LIGHT += diffuse;
	}
	
	// Specular lighting.
	if (use_specular) {
		vec3 H = normalize(LIGHT + VIEW);
		float NdotH = dot(NORMAL, H);
		float specular_amount = max(pow(NdotH, specular_shininess*specular_shininess), 0.0f)
							    * texture(specular_map, UV).r
								* attenuation;
		specular_amount = split_specular(specular_amount);
		SPECULAR_LIGHT += specular_strength * specular_amount * LIGHT_COLOR;
	}
	
	// Simple rim lighting.
	if (use_rim) {
		float NdotV = dot(NORMAL, VIEW);
		float rim_light = pow(1.0 - NdotV, rim_width);
		SPECULAR_LIGHT += rim_light * rim_color.rgb * rim_color.a * LIGHT_COLOR / PI; //Changed DIFFUSE_LIGHT to SPECULAR_LIGHT while migrating for similar result
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uiwkg"]
render_priority = 0
shader = SubResource("Shader_nhxr7")
shader_parameter/albedo = Color(0.176471, 0.482353, 0.709804, 1)
shader_parameter/clamp_diffuse_to_max = false
shader_parameter/cuts = 3
shader_parameter/wrap = 0.45
shader_parameter/steepness = 1.0
shader_parameter/use_attenuation = true
shader_parameter/use_specular = true
shader_parameter/specular_strength = 1.0
shader_parameter/specular_shininess = 16.0
shader_parameter/use_rim = false
shader_parameter/rim_width = 8.0
shader_parameter/rim_color = Color(1, 1, 1, 1)
shader_parameter/use_ramp = false
shader_parameter/use_borders = false
shader_parameter/border_width = 0.01

[node name="Node3D" type="Node3D"]

[node name="CameraController" parent="." instance=ExtResource("1_ta1ms")]
transform = Transform3D(1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 4, 4)
size = 4.0

[node name="OmniLight3D" type="OmniLight3D" parent="CameraController"]
transform = Transform3D(1, 0, 0, 0, 0.707107, -0.707107, 0, 0.707107, 0.707107, 0, 4.31434, -1.34251)
light_color = Color(0.6, 0.647059, 0.74902, 1)
shadow_enabled = true
omni_range = 11.717
omni_attenuation = 0.659754

[node name="BasketballBall" type="MeshInstance3D" parent="."]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 0.432581, 0)
mesh = ExtResource("2_anogb")
surface_material_override/0 = ExtResource("3_8em8c")
surface_material_override/1 = SubResource("StandardMaterial3D_7hum5")

[node name="AnimationPlayer" type="AnimationPlayer" parent="BasketballBall"]
autoplay = "new_animation"
libraries = {
"": SubResource("AnimationLibrary_htifs")
}

[node name="ThreeQuarterRoom" parent="." instance=ExtResource("3_idi6a")]

[node name="Floot" parent="ThreeQuarterRoom" index="1"]
surface_material_override/0 = SubResource("ShaderMaterial_uiwkg")

[node name="MeshInstance3D" parent="ThreeQuarterRoom/Walls" index="0"]
surface_material_override/0 = ExtResource("5_p4wtg")

[node name="MeshInstance3D2" parent="ThreeQuarterRoom/Walls" index="1"]
surface_material_override/0 = ExtResource("5_p4wtg")

[node name="MeshInstance3D3" parent="ThreeQuarterRoom/Walls" index="2"]
surface_material_override/0 = ExtResource("5_p4wtg")

[editable path="ThreeQuarterRoom"]
